// @ts-nocheck
/* eslint-disable */
/**
 * Dating backoffice
 * The Dating backoffice API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { QuestionEntity }         from './QuestionEntity.js'

import { QuestionEntityFromJSON }      from './QuestionEntity.js'
import { QuestionEntityFromJSONTyped } from './QuestionEntity.js'
import { QuestionEntityToJSON }        from './QuestionEntity.js'
import { exists }                      from '../runtime.js'
import { mapValues }                   from '../runtime.js'

/**
 *
 * @export
 * @interface QuestionaireEntity
 */
export interface QuestionaireEntity {
  /**
   * The id of the questionaire
   * @type {string}
   * @memberof QuestionaireEntity
   */
  id: string
  /**
   * The status of the questionaire
   * @type {string}
   * @memberof QuestionaireEntity
   */
  status: QuestionaireEntityStatusEnum
  /**
   * The name of the questionaire
   * @type {string}
   * @memberof QuestionaireEntity
   */
  name: string
  /**
   * The questions of the questionaire
   * @type {Array<QuestionEntity>}
   * @memberof QuestionaireEntity
   */
  questions: Array<QuestionEntity>
  /**
   * The creation date of the profile
   * @type {Date}
   * @memberof QuestionaireEntity
   */
  createdAt: Date
}

/**
 * @export
 */
export const QuestionaireEntityStatusEnum = {
  Active: 'ACTIVE',
  Inactive: 'INACTIVE',
} as const
export type QuestionaireEntityStatusEnum =
  (typeof QuestionaireEntityStatusEnum)[keyof typeof QuestionaireEntityStatusEnum]

/**
 * Check if a given object implements the QuestionaireEntity interface.
 */
export function instanceOfQuestionaireEntity(value: object): boolean {
  let isInstance = true
  isInstance = isInstance && 'id' in value
  isInstance = isInstance && 'status' in value
  isInstance = isInstance && 'name' in value
  isInstance = isInstance && 'questions' in value
  isInstance = isInstance && 'createdAt' in value

  return isInstance
}

export function QuestionaireEntityFromJSON(json: any): QuestionaireEntity {
  return QuestionaireEntityFromJSONTyped(json, false)
}

export function QuestionaireEntityFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): QuestionaireEntity {
  if (json === undefined || json === null) {
    return json
  }
  return {
    id: json['id'],
    status: json['status'],
    name: json['name'],
    questions: (json['questions'] as Array<any>).map(QuestionEntityFromJSON),
    createdAt: new Date(json['createdAt']),
  }
}

export function QuestionaireEntityToJSON(value?: QuestionaireEntity | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    id: value.id,
    status: value.status,
    name: value.name,
    questions: (value.questions as Array<any>).map(QuestionEntityToJSON),
    createdAt: value.createdAt.toISOString(),
  }
}
