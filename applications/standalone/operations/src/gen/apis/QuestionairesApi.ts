// @ts-nocheck
/* eslint-disable */
/**
 * Dating backoffice
 * The Dating backoffice API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AddQuestionareQuestionRequest }       from '../models/index.js'
import type { ChangeQuestionaireNameRequest }       from '../models/index.js'
import type { ChangeQuestionairePhotoRequest }      from '../models/index.js'
import type { ChangeQuestionareQuestionRequest }    from '../models/index.js'
import type { CreateQuestionaireRequest }           from '../models/index.js'
import type { ListQuestionairesResponse }           from '../models/index.js'
import type { QuestionaireEntity }                  from '../models/index.js'

import * as runtime                                 from '../runtime.js'
import { AddQuestionareQuestionRequestFromJSON }    from '../models/index.js'
import { AddQuestionareQuestionRequestToJSON }      from '../models/index.js'
import { ChangeQuestionaireNameRequestFromJSON }    from '../models/index.js'
import { ChangeQuestionaireNameRequestToJSON }      from '../models/index.js'
import { ChangeQuestionairePhotoRequestFromJSON }   from '../models/index.js'
import { ChangeQuestionairePhotoRequestToJSON }     from '../models/index.js'
import { ChangeQuestionareQuestionRequestFromJSON } from '../models/index.js'
import { ChangeQuestionareQuestionRequestToJSON }   from '../models/index.js'
import { CreateQuestionaireRequestFromJSON }        from '../models/index.js'
import { CreateQuestionaireRequestToJSON }          from '../models/index.js'
import { ListQuestionairesResponseFromJSON }        from '../models/index.js'
import { ListQuestionairesResponseToJSON }          from '../models/index.js'
import { QuestionaireEntityFromJSON }               from '../models/index.js'
import { QuestionaireEntityToJSON }                 from '../models/index.js'

export interface ActivateRequest {
  id: string
}

export interface AddQuestionRequest {
  id: string
  addQuestionareQuestionRequest: AddQuestionareQuestionRequest
}

export interface ChangeNameRequest {
  id: string
  changeQuestionaireNameRequest: ChangeQuestionaireNameRequest
}

export interface ChangePhotoRequest {
  id: string
  changeQuestionairePhotoRequest: ChangeQuestionairePhotoRequest
}

export interface ChangeQuestionRequest {
  id: string
  questionId: string
  changeQuestionareQuestionRequest: ChangeQuestionareQuestionRequest
}

export interface CreateRequest {
  createQuestionaireRequest: CreateQuestionaireRequest
}

export interface DeactivateRequest {
  id: string
}

export interface DeleteQuestionRequest {
  id: string
  questionId: string
}

/**
 * QuestionairesApi - interface
 *
 * @export
 * @interface QuestionairesApiInterface
 */
export interface QuestionairesApiInterface {
  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  activateRaw(
    requestParameters: ActivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  activate(
    requestParameters: ActivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {AddQuestionareQuestionRequest} addQuestionareQuestionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  addQuestionRaw(
    requestParameters: AddQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  addQuestion(
    requestParameters: AddQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {ChangeQuestionaireNameRequest} changeQuestionaireNameRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  changeNameRaw(
    requestParameters: ChangeNameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  changeName(
    requestParameters: ChangeNameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {ChangeQuestionairePhotoRequest} changeQuestionairePhotoRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  changePhotoRaw(
    requestParameters: ChangePhotoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  changePhoto(
    requestParameters: ChangePhotoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {string} questionId
   * @param {ChangeQuestionareQuestionRequest} changeQuestionareQuestionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  changeQuestionRaw(
    requestParameters: ChangeQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  changeQuestion(
    requestParameters: ChangeQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {CreateQuestionaireRequest} createQuestionaireRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  create(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  deactivateRaw(
    requestParameters: DeactivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  deactivate(
    requestParameters: DeactivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {string} id
   * @param {string} questionId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  deleteQuestionRaw(
    requestParameters: DeleteQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>>

  /**
   */
  deleteQuestion(
    requestParameters: DeleteQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity>

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionairesApiInterface
   */
  listRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListQuestionairesResponse>>

  /**
   */
  list(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListQuestionairesResponse>
}

/**
 *
 */
export class QuestionairesApi extends runtime.BaseAPI implements QuestionairesApiInterface {
  /**
   */
  async activateRaw(
    requestParameters: ActivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling activate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/activate`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async activate(
    requestParameters: ActivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.activateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async addQuestionRaw(
    requestParameters: AddQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling addQuestion.'
      )
    }

    if (
      requestParameters.addQuestionareQuestionRequest === null ||
      requestParameters.addQuestionareQuestionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'addQuestionareQuestionRequest',
        'Required parameter requestParameters.addQuestionareQuestionRequest was null or undefined when calling addQuestion.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/questions`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddQuestionareQuestionRequestToJSON(requestParameters.addQuestionareQuestionRequest),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async addQuestion(
    requestParameters: AddQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.addQuestionRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async changeNameRaw(
    requestParameters: ChangeNameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling changeName.'
      )
    }

    if (
      requestParameters.changeQuestionaireNameRequest === null ||
      requestParameters.changeQuestionaireNameRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'changeQuestionaireNameRequest',
        'Required parameter requestParameters.changeQuestionaireNameRequest was null or undefined when calling changeName.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/name`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChangeQuestionaireNameRequestToJSON(requestParameters.changeQuestionaireNameRequest),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async changeName(
    requestParameters: ChangeNameRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.changeNameRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async changePhotoRaw(
    requestParameters: ChangePhotoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling changePhoto.'
      )
    }

    if (
      requestParameters.changeQuestionairePhotoRequest === null ||
      requestParameters.changeQuestionairePhotoRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'changeQuestionairePhotoRequest',
        'Required parameter requestParameters.changeQuestionairePhotoRequest was null or undefined when calling changePhoto.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/photo`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChangeQuestionairePhotoRequestToJSON(
          requestParameters.changeQuestionairePhotoRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async changePhoto(
    requestParameters: ChangePhotoRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.changePhotoRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async changeQuestionRaw(
    requestParameters: ChangeQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling changeQuestion.'
      )
    }

    if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
      throw new runtime.RequiredError(
        'questionId',
        'Required parameter requestParameters.questionId was null or undefined when calling changeQuestion.'
      )
    }

    if (
      requestParameters.changeQuestionareQuestionRequest === null ||
      requestParameters.changeQuestionareQuestionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'changeQuestionareQuestionRequest',
        'Required parameter requestParameters.changeQuestionareQuestionRequest was null or undefined when calling changeQuestion.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/questions/{question_id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'question_id'}}`, encodeURIComponent(String(requestParameters.questionId))),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ChangeQuestionareQuestionRequestToJSON(
          requestParameters.changeQuestionareQuestionRequest
        ),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async changeQuestion(
    requestParameters: ChangeQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.changeQuestionRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (
      requestParameters.createQuestionaireRequest === null ||
      requestParameters.createQuestionaireRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createQuestionaireRequest',
        'Required parameter requestParameters.createQuestionaireRequest was null or undefined when calling create.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    headerParameters['Content-Type'] = 'application/json'

    const response = await this.request(
      {
        path: `/api/questionaires`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateQuestionaireRequestToJSON(requestParameters.createQuestionaireRequest),
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async create(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.createRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async deactivateRaw(
    requestParameters: DeactivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deactivate.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/deactivate`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async deactivate(
    requestParameters: DeactivateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.deactivateRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async deleteQuestionRaw(
    requestParameters: DeleteQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<QuestionaireEntity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteQuestion.'
      )
    }

    if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
      throw new runtime.RequiredError(
        'questionId',
        'Required parameter requestParameters.questionId was null or undefined when calling deleteQuestion.'
      )
    }

    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/questionaires/{id}/questions/{question_id}`
          .replace(`{${'id'}}`, encodeURIComponent(String(requestParameters.id)))
          .replace(`{${'question_id'}}`, encodeURIComponent(String(requestParameters.questionId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      QuestionaireEntityFromJSON(jsonValue))
  }

  /**
   */
  async deleteQuestion(
    requestParameters: DeleteQuestionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<QuestionaireEntity> {
    const response = await this.deleteQuestionRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async listRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ListQuestionairesResponse>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request(
      {
        path: `/api/questionaires`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ListQuestionairesResponseFromJSON(jsonValue))
  }

  /**
   */
  async list(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ListQuestionairesResponse> {
    const response = await this.listRaw(initOverrides)
    return await response.value()
  }
}
