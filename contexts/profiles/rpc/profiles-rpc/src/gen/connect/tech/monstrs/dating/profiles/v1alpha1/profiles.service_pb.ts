// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file tech/monstrs/dating/profiles/v1alpha1/profiles.service.proto (package tech.monstrs.dating.profiles.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Timestamp }              from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Search }           from '../../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from enum tech.monstrs.dating.profiles.v1alpha1.ProfileGender
 */
export enum ProfileGender {
  /**
   * @generated from enum value: MALE = 0;
   */
  MALE = 0,

  /**
   * @generated from enum value: FEMALE = 1;
   */
  FEMALE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ProfileGender)
proto3.util.setEnumType(ProfileGender, 'tech.monstrs.dating.profiles.v1alpha1.ProfileGender', [
  { no: 0, name: 'MALE' },
  { no: 1, name: 'FEMALE' },
])

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.Profile
 */
export class Profile extends Message<Profile> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: optional tech.monstrs.dating.profiles.v1alpha1.ProfileGender gender = 2;
   */
  gender?: ProfileGender

  /**
   * @generated from field: optional string name = 3;
   */
  name?: string

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Profile>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.Profile'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'gender', kind: 'enum', T: proto3.getEnumType(ProfileGender), opt: true },
    { no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profile {
    return new Profile().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJsonString(jsonString, options)
  }

  static equals(
    a: Profile | PlainMessage<Profile> | undefined,
    b: Profile | PlainMessage<Profile> | undefined
  ): boolean {
    return proto3.util.equals(Profile, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.SelectProfileGenderRequest
 */
export class SelectProfileGenderRequest extends Message<SelectProfileGenderRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.ProfileGender gender = 2;
   */
  gender = ProfileGender.MALE

  constructor(data?: PartialMessage<SelectProfileGenderRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.SelectProfileGenderRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'gender', kind: 'enum', T: proto3.getEnumType(ProfileGender) },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SelectProfileGenderRequest {
    return new SelectProfileGenderRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SelectProfileGenderRequest {
    return new SelectProfileGenderRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SelectProfileGenderRequest {
    return new SelectProfileGenderRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SelectProfileGenderRequest | PlainMessage<SelectProfileGenderRequest> | undefined,
    b: SelectProfileGenderRequest | PlainMessage<SelectProfileGenderRequest> | undefined
  ): boolean {
    return proto3.util.equals(SelectProfileGenderRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.SelectProfileGenderResponse
 */
export class SelectProfileGenderResponse extends Message<SelectProfileGenderResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<SelectProfileGenderResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.SelectProfileGenderResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SelectProfileGenderResponse {
    return new SelectProfileGenderResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SelectProfileGenderResponse {
    return new SelectProfileGenderResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SelectProfileGenderResponse {
    return new SelectProfileGenderResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SelectProfileGenderResponse | PlainMessage<SelectProfileGenderResponse> | undefined,
    b: SelectProfileGenderResponse | PlainMessage<SelectProfileGenderResponse> | undefined
  ): boolean {
    return proto3.util.equals(SelectProfileGenderResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ChangeProfileNameRequest
 */
export class ChangeProfileNameRequest extends Message<ChangeProfileNameRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: string name = 2;
   */
  name = ''

  constructor(data?: PartialMessage<ChangeProfileNameRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ChangeProfileNameRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeProfileNameRequest {
    return new ChangeProfileNameRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeProfileNameRequest {
    return new ChangeProfileNameRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeProfileNameRequest {
    return new ChangeProfileNameRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeProfileNameRequest | PlainMessage<ChangeProfileNameRequest> | undefined,
    b: ChangeProfileNameRequest | PlainMessage<ChangeProfileNameRequest> | undefined
  ): boolean {
    return proto3.util.equals(ChangeProfileNameRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ChangeProfileNameResponse
 */
export class ChangeProfileNameResponse extends Message<ChangeProfileNameResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<ChangeProfileNameResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ChangeProfileNameResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeProfileNameResponse {
    return new ChangeProfileNameResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeProfileNameResponse {
    return new ChangeProfileNameResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeProfileNameResponse {
    return new ChangeProfileNameResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeProfileNameResponse | PlainMessage<ChangeProfileNameResponse> | undefined,
    b: ChangeProfileNameResponse | PlainMessage<ChangeProfileNameResponse> | undefined
  ): boolean {
    return proto3.util.equals(ChangeProfileNameResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest
 */
export class ListProfilesRequest extends Message<ListProfilesRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Search search = 3;
   */
  search?: Query_Search

  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery query = 4;
   */
  query?: ListProfilesRequest_ProfilesQuery

  constructor(data?: PartialMessage<ListProfilesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'search', kind: 'message', T: Query_Search },
    { no: 4, name: 'query', kind: 'message', T: ListProfilesRequest_ProfilesQuery },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProfilesRequest {
    return new ListProfilesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProfilesRequest {
    return new ListProfilesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest {
    return new ListProfilesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProfilesRequest | PlainMessage<ListProfilesRequest> | undefined,
    b: ListProfilesRequest | PlainMessage<ListProfilesRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery
 */
export class ListProfilesRequest_ProfilesQuery extends Message<ListProfilesRequest_ProfilesQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  constructor(data?: PartialMessage<ListProfilesRequest_ProfilesQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListProfilesRequest_ProfilesQuery
      | PlainMessage<ListProfilesRequest_ProfilesQuery>
      | undefined,
    b:
      | ListProfilesRequest_ProfilesQuery
      | PlainMessage<ListProfilesRequest_ProfilesQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesRequest_ProfilesQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesResponse
 */
export class ListProfilesResponse extends Message<ListProfilesResponse> {
  /**
   * @generated from field: repeated tech.monstrs.dating.profiles.v1alpha1.Profile profiles = 1;
   */
  profiles: Profile[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListProfilesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ListProfilesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profiles', kind: 'message', T: Profile, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProfilesResponse {
    return new ListProfilesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProfilesResponse {
    return new ListProfilesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesResponse {
    return new ListProfilesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProfilesResponse | PlainMessage<ListProfilesResponse> | undefined,
    b: ListProfilesResponse | PlainMessage<ListProfilesResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesResponse, a, b)
  }
}
