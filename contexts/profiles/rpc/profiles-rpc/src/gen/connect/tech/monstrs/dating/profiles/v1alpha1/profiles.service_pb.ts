// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file tech/monstrs/dating/profiles/v1alpha1/profiles.service.proto (package tech.monstrs.dating.profiles.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Timestamp }              from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Search }           from '../../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from enum tech.monstrs.dating.profiles.v1alpha1.ProfileGender
 */
export enum ProfileGender {
  /**
   * @generated from enum value: MALE = 0;
   */
  MALE = 0,

  /**
   * @generated from enum value: FEMALE = 1;
   */
  FEMALE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ProfileGender)
proto3.util.setEnumType(ProfileGender, 'tech.monstrs.dating.profiles.v1alpha1.ProfileGender', [
  { no: 0, name: 'MALE' },
  { no: 1, name: 'FEMALE' },
])

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ProfileGeoposition
 */
export class ProfileGeoposition extends Message<ProfileGeoposition> {
  /**
   * @generated from field: float latitude = 1;
   */
  latitude = 0

  /**
   * @generated from field: float longitude = 2;
   */
  longitude = 0

  constructor(data?: PartialMessage<ProfileGeoposition>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ProfileGeoposition'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'latitude', kind: 'scalar', T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: 'longitude', kind: 'scalar', T: 2 /* ScalarType.FLOAT */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileGeoposition {
    return new ProfileGeoposition().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileGeoposition {
    return new ProfileGeoposition().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ProfileGeoposition {
    return new ProfileGeoposition().fromJsonString(jsonString, options)
  }

  static equals(
    a: ProfileGeoposition | PlainMessage<ProfileGeoposition> | undefined,
    b: ProfileGeoposition | PlainMessage<ProfileGeoposition> | undefined
  ): boolean {
    return proto3.util.equals(ProfileGeoposition, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.Profile
 */
export class Profile extends Message<Profile> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: optional tech.monstrs.dating.profiles.v1alpha1.ProfileGender gender = 2;
   */
  gender?: ProfileGender

  /**
   * @generated from field: optional string name = 3;
   */
  name?: string

  /**
   * @generated from field: optional string location = 4;
   */
  location?: string

  /**
   * @generated from field: optional tech.monstrs.dating.profiles.v1alpha1.ProfileGeoposition geoposition = 5;
   */
  geoposition?: ProfileGeoposition

  /**
   * @generated from field: repeated string photos = 6;
   */
  photos: string[] = []

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Profile>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.Profile'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'gender', kind: 'enum', T: proto3.getEnumType(ProfileGender), opt: true },
    { no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'location', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'geoposition', kind: 'message', T: ProfileGeoposition, opt: true },
    { no: 6, name: 'photos', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Profile {
    return new Profile().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Profile {
    return new Profile().fromJsonString(jsonString, options)
  }

  static equals(
    a: Profile | PlainMessage<Profile> | undefined,
    b: Profile | PlainMessage<Profile> | undefined
  ): boolean {
    return proto3.util.equals(Profile, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileGeopositionRequest
 */
export class FillProfileGeopositionRequest extends Message<FillProfileGeopositionRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: float latitude = 2;
   */
  latitude = 0

  /**
   * @generated from field: float longitude = 3;
   */
  longitude = 0

  constructor(data?: PartialMessage<FillProfileGeopositionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileGeopositionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'latitude', kind: 'scalar', T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: 'longitude', kind: 'scalar', T: 2 /* ScalarType.FLOAT */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileGeopositionRequest {
    return new FillProfileGeopositionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileGeopositionRequest {
    return new FillProfileGeopositionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileGeopositionRequest {
    return new FillProfileGeopositionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileGeopositionRequest | PlainMessage<FillProfileGeopositionRequest> | undefined,
    b: FillProfileGeopositionRequest | PlainMessage<FillProfileGeopositionRequest> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileGeopositionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileGeopositionResponse
 */
export class FillProfileGeopositionResponse extends Message<FillProfileGeopositionResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<FillProfileGeopositionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileGeopositionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileGeopositionResponse {
    return new FillProfileGeopositionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileGeopositionResponse {
    return new FillProfileGeopositionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileGeopositionResponse {
    return new FillProfileGeopositionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileGeopositionResponse | PlainMessage<FillProfileGeopositionResponse> | undefined,
    b: FillProfileGeopositionResponse | PlainMessage<FillProfileGeopositionResponse> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileGeopositionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileGenderRequest
 */
export class FillProfileGenderRequest extends Message<FillProfileGenderRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.ProfileGender gender = 2;
   */
  gender = ProfileGender.MALE

  constructor(data?: PartialMessage<FillProfileGenderRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileGenderRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'gender', kind: 'enum', T: proto3.getEnumType(ProfileGender) },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileGenderRequest {
    return new FillProfileGenderRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileGenderRequest {
    return new FillProfileGenderRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileGenderRequest {
    return new FillProfileGenderRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileGenderRequest | PlainMessage<FillProfileGenderRequest> | undefined,
    b: FillProfileGenderRequest | PlainMessage<FillProfileGenderRequest> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileGenderRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileGenderResponse
 */
export class FillProfileGenderResponse extends Message<FillProfileGenderResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<FillProfileGenderResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileGenderResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileGenderResponse {
    return new FillProfileGenderResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileGenderResponse {
    return new FillProfileGenderResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileGenderResponse {
    return new FillProfileGenderResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileGenderResponse | PlainMessage<FillProfileGenderResponse> | undefined,
    b: FillProfileGenderResponse | PlainMessage<FillProfileGenderResponse> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileGenderResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileNameRequest
 */
export class FillProfileNameRequest extends Message<FillProfileNameRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: string name = 2;
   */
  name = ''

  constructor(data?: PartialMessage<FillProfileNameRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileNameRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileNameRequest {
    return new FillProfileNameRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileNameRequest {
    return new FillProfileNameRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileNameRequest {
    return new FillProfileNameRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileNameRequest | PlainMessage<FillProfileNameRequest> | undefined,
    b: FillProfileNameRequest | PlainMessage<FillProfileNameRequest> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileNameRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.FillProfileNameResponse
 */
export class FillProfileNameResponse extends Message<FillProfileNameResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<FillProfileNameResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.FillProfileNameResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): FillProfileNameResponse {
    return new FillProfileNameResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): FillProfileNameResponse {
    return new FillProfileNameResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): FillProfileNameResponse {
    return new FillProfileNameResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: FillProfileNameResponse | PlainMessage<FillProfileNameResponse> | undefined,
    b: FillProfileNameResponse | PlainMessage<FillProfileNameResponse> | undefined
  ): boolean {
    return proto3.util.equals(FillProfileNameResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.AddProfilePhotoRequest
 */
export class AddProfilePhotoRequest extends Message<AddProfilePhotoRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: string photo_id = 2;
   */
  photoId = ''

  constructor(data?: PartialMessage<AddProfilePhotoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.AddProfilePhotoRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'photo_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddProfilePhotoRequest {
    return new AddProfilePhotoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddProfilePhotoRequest {
    return new AddProfilePhotoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddProfilePhotoRequest {
    return new AddProfilePhotoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddProfilePhotoRequest | PlainMessage<AddProfilePhotoRequest> | undefined,
    b: AddProfilePhotoRequest | PlainMessage<AddProfilePhotoRequest> | undefined
  ): boolean {
    return proto3.util.equals(AddProfilePhotoRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.AddProfilePhotoResponse
 */
export class AddProfilePhotoResponse extends Message<AddProfilePhotoResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<AddProfilePhotoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.AddProfilePhotoResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddProfilePhotoResponse {
    return new AddProfilePhotoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddProfilePhotoResponse {
    return new AddProfilePhotoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddProfilePhotoResponse {
    return new AddProfilePhotoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddProfilePhotoResponse | PlainMessage<AddProfilePhotoResponse> | undefined,
    b: AddProfilePhotoResponse | PlainMessage<AddProfilePhotoResponse> | undefined
  ): boolean {
    return proto3.util.equals(AddProfilePhotoResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.SkipProfileRequest
 */
export class SkipProfileRequest extends Message<SkipProfileRequest> {
  /**
   * @generated from field: string profile_id = 1;
   */
  profileId = ''

  /**
   * @generated from field: string target_id = 2;
   */
  targetId = ''

  constructor(data?: PartialMessage<SkipProfileRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.SkipProfileRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profile_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'target_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SkipProfileRequest {
    return new SkipProfileRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SkipProfileRequest {
    return new SkipProfileRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SkipProfileRequest {
    return new SkipProfileRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: SkipProfileRequest | PlainMessage<SkipProfileRequest> | undefined,
    b: SkipProfileRequest | PlainMessage<SkipProfileRequest> | undefined
  ): boolean {
    return proto3.util.equals(SkipProfileRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.SkipProfileResponse
 */
export class SkipProfileResponse extends Message<SkipProfileResponse> {
  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.Profile result = 1;
   */
  result?: Profile

  constructor(data?: PartialMessage<SkipProfileResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.SkipProfileResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Profile },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SkipProfileResponse {
    return new SkipProfileResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SkipProfileResponse {
    return new SkipProfileResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SkipProfileResponse {
    return new SkipProfileResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: SkipProfileResponse | PlainMessage<SkipProfileResponse> | undefined,
    b: SkipProfileResponse | PlainMessage<SkipProfileResponse> | undefined
  ): boolean {
    return proto3.util.equals(SkipProfileResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest
 */
export class ListProfilesRequest extends Message<ListProfilesRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Search search = 3;
   */
  search?: Query_Search

  /**
   * @generated from field: tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery query = 4;
   */
  query?: ListProfilesRequest_ProfilesQuery

  constructor(data?: PartialMessage<ListProfilesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'search', kind: 'message', T: Query_Search },
    { no: 4, name: 'query', kind: 'message', T: ListProfilesRequest_ProfilesQuery },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProfilesRequest {
    return new ListProfilesRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProfilesRequest {
    return new ListProfilesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest {
    return new ListProfilesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProfilesRequest | PlainMessage<ListProfilesRequest> | undefined,
    b: ListProfilesRequest | PlainMessage<ListProfilesRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery
 */
export class ListProfilesRequest_ProfilesQuery extends Message<ListProfilesRequest_ProfilesQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  constructor(data?: PartialMessage<ListProfilesRequest_ProfilesQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.profiles.v1alpha1.ListProfilesRequest.ProfilesQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesRequest_ProfilesQuery {
    return new ListProfilesRequest_ProfilesQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListProfilesRequest_ProfilesQuery
      | PlainMessage<ListProfilesRequest_ProfilesQuery>
      | undefined,
    b:
      | ListProfilesRequest_ProfilesQuery
      | PlainMessage<ListProfilesRequest_ProfilesQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesRequest_ProfilesQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.profiles.v1alpha1.ListProfilesResponse
 */
export class ListProfilesResponse extends Message<ListProfilesResponse> {
  /**
   * @generated from field: repeated tech.monstrs.dating.profiles.v1alpha1.Profile profiles = 1;
   */
  profiles: Profile[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListProfilesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.profiles.v1alpha1.ListProfilesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'profiles', kind: 'message', T: Profile, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProfilesResponse {
    return new ListProfilesResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProfilesResponse {
    return new ListProfilesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListProfilesResponse {
    return new ListProfilesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListProfilesResponse | PlainMessage<ListProfilesResponse> | undefined,
    b: ListProfilesResponse | PlainMessage<ListProfilesResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListProfilesResponse, a, b)
  }
}
