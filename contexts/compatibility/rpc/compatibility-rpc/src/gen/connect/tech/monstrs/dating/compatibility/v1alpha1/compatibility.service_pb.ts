// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file tech/monstrs/dating/compatibility/v1alpha1/compatibility.service.proto (package tech.monstrs.dating.compatibility.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions } from '@bufbuild/protobuf'
import type { FieldList }         from '@bufbuild/protobuf'
import type { JsonReadOptions }   from '@bufbuild/protobuf'
import type { JsonValue }         from '@bufbuild/protobuf'
import type { PartialMessage }    from '@bufbuild/protobuf'
import type { PlainMessage }      from '@bufbuild/protobuf'

import { Message }                from '@bufbuild/protobuf'
import { Timestamp }              from '@bufbuild/protobuf'
import { proto3 }                 from '@bufbuild/protobuf'

import { Query_ID }               from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Int }              from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Order }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Pager }            from '../../../queries/v1alpha1/queries_pb.js'
import { Query_Search }           from '../../../queries/v1alpha1/queries_pb.js'

/**
 * @generated from enum tech.monstrs.dating.compatibility.v1alpha1.QuestionaireStatus
 */
export enum QuestionaireStatus {
  /**
   * @generated from enum value: ACTIVE = 0;
   */
  ACTIVE = 0,

  /**
   * @generated from enum value: INACTIVE = 1;
   */
  INACTIVE = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(QuestionaireStatus)
proto3.util.setEnumType(
  QuestionaireStatus,
  'tech.monstrs.dating.compatibility.v1alpha1.QuestionaireStatus',
  [
    { no: 0, name: 'ACTIVE' },
    { no: 1, name: 'INACTIVE' },
  ]
)

/**
 * @generated from enum tech.monstrs.dating.compatibility.v1alpha1.SurveyStatus
 */
export enum SurveyStatus {
  /**
   * @generated from enum value: STARTED = 0;
   */
  STARTED = 0,

  /**
   * @generated from enum value: COMPLETED = 1;
   */
  COMPLETED = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SurveyStatus)
proto3.util.setEnumType(SurveyStatus, 'tech.monstrs.dating.compatibility.v1alpha1.SurveyStatus', [
  { no: 0, name: 'STARTED' },
  { no: 1, name: 'COMPLETED' },
])

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.Question
 */
export class Question extends Message<Question> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: string content = 2;
   */
  content = ''

  constructor(data?: PartialMessage<Question>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.Question'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'content', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Question {
    return new Question().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Question {
    return new Question().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Question {
    return new Question().fromJsonString(jsonString, options)
  }

  static equals(
    a: Question | PlainMessage<Question> | undefined,
    b: Question | PlainMessage<Question> | undefined
  ): boolean {
    return proto3.util.equals(Question, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.Questionaire
 */
export class Questionaire extends Message<Questionaire> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.QuestionaireStatus status = 2;
   */
  status = QuestionaireStatus.ACTIVE

  /**
   * @generated from field: string name = 3;
   */
  name = ''

  /**
   * @generated from field: optional string photo_id = 4;
   */
  photoId?: string

  /**
   * @generated from field: repeated tech.monstrs.dating.compatibility.v1alpha1.Question questions = 5;
   */
  questions: Question[] = []

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Questionaire>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.Questionaire'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'status', kind: 'enum', T: proto3.getEnumType(QuestionaireStatus) },
    { no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'photo_id', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'questions', kind: 'message', T: Question, repeated: true },
    { no: 6, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Questionaire {
    return new Questionaire().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Questionaire {
    return new Questionaire().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Questionaire {
    return new Questionaire().fromJsonString(jsonString, options)
  }

  static equals(
    a: Questionaire | PlainMessage<Questionaire> | undefined,
    b: Questionaire | PlainMessage<Questionaire> | undefined
  ): boolean {
    return proto3.util.equals(Questionaire, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.Survey
 */
export class Survey extends Message<Survey> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.SurveyStatus status = 2;
   */
  status = SurveyStatus.STARTED

  /**
   * @generated from field: string interviewee_id = 3;
   */
  intervieweeId = ''

  /**
   * @generated from field: string questionaire_id = 4;
   */
  questionaireId = ''

  /**
   * @generated from field: map<string, int32> answers = 5;
   */
  answers: { [key: string]: number } = {}

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp

  constructor(data?: PartialMessage<Survey>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.Survey'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'status', kind: 'enum', T: proto3.getEnumType(SurveyStatus) },
    { no: 3, name: 'interviewee_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 5,
      name: 'answers',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    },
    { no: 6, name: 'created_at', kind: 'message', T: Timestamp },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Survey {
    return new Survey().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Survey {
    return new Survey().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Survey {
    return new Survey().fromJsonString(jsonString, options)
  }

  static equals(
    a: Survey | PlainMessage<Survey> | undefined,
    b: Survey | PlainMessage<Survey> | undefined
  ): boolean {
    return proto3.util.equals(Survey, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.CreateQuestionaireRequest
 */
export class CreateQuestionaireRequest extends Message<CreateQuestionaireRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = ''

  constructor(data?: PartialMessage<CreateQuestionaireRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.CreateQuestionaireRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateQuestionaireRequest {
    return new CreateQuestionaireRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateQuestionaireRequest {
    return new CreateQuestionaireRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateQuestionaireRequest {
    return new CreateQuestionaireRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateQuestionaireRequest | PlainMessage<CreateQuestionaireRequest> | undefined,
    b: CreateQuestionaireRequest | PlainMessage<CreateQuestionaireRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateQuestionaireRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.CreateQuestionaireResponse
 */
export class CreateQuestionaireResponse extends Message<CreateQuestionaireResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<CreateQuestionaireResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.CreateQuestionaireResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CreateQuestionaireResponse {
    return new CreateQuestionaireResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CreateQuestionaireResponse {
    return new CreateQuestionaireResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateQuestionaireResponse {
    return new CreateQuestionaireResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: CreateQuestionaireResponse | PlainMessage<CreateQuestionaireResponse> | undefined,
    b: CreateQuestionaireResponse | PlainMessage<CreateQuestionaireResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateQuestionaireResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ActivateQuestionaireRequest
 */
export class ActivateQuestionaireRequest extends Message<ActivateQuestionaireRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  constructor(data?: PartialMessage<ActivateQuestionaireRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ActivateQuestionaireRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ActivateQuestionaireRequest {
    return new ActivateQuestionaireRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ActivateQuestionaireRequest {
    return new ActivateQuestionaireRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ActivateQuestionaireRequest {
    return new ActivateQuestionaireRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ActivateQuestionaireRequest | PlainMessage<ActivateQuestionaireRequest> | undefined,
    b: ActivateQuestionaireRequest | PlainMessage<ActivateQuestionaireRequest> | undefined
  ): boolean {
    return proto3.util.equals(ActivateQuestionaireRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ActivateQuestionaireResponse
 */
export class ActivateQuestionaireResponse extends Message<ActivateQuestionaireResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<ActivateQuestionaireResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ActivateQuestionaireResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ActivateQuestionaireResponse {
    return new ActivateQuestionaireResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ActivateQuestionaireResponse {
    return new ActivateQuestionaireResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ActivateQuestionaireResponse {
    return new ActivateQuestionaireResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ActivateQuestionaireResponse | PlainMessage<ActivateQuestionaireResponse> | undefined,
    b: ActivateQuestionaireResponse | PlainMessage<ActivateQuestionaireResponse> | undefined
  ): boolean {
    return proto3.util.equals(ActivateQuestionaireResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.DeactivateQuestionaireRequest
 */
export class DeactivateQuestionaireRequest extends Message<DeactivateQuestionaireRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  constructor(data?: PartialMessage<DeactivateQuestionaireRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.DeactivateQuestionaireRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeactivateQuestionaireRequest {
    return new DeactivateQuestionaireRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeactivateQuestionaireRequest {
    return new DeactivateQuestionaireRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeactivateQuestionaireRequest {
    return new DeactivateQuestionaireRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeactivateQuestionaireRequest | PlainMessage<DeactivateQuestionaireRequest> | undefined,
    b: DeactivateQuestionaireRequest | PlainMessage<DeactivateQuestionaireRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeactivateQuestionaireRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.DeactivateQuestionaireResponse
 */
export class DeactivateQuestionaireResponse extends Message<DeactivateQuestionaireResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<DeactivateQuestionaireResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.DeactivateQuestionaireResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeactivateQuestionaireResponse {
    return new DeactivateQuestionaireResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeactivateQuestionaireResponse {
    return new DeactivateQuestionaireResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeactivateQuestionaireResponse {
    return new DeactivateQuestionaireResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: DeactivateQuestionaireResponse | PlainMessage<DeactivateQuestionaireResponse> | undefined,
    b: DeactivateQuestionaireResponse | PlainMessage<DeactivateQuestionaireResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeactivateQuestionaireResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireNameRequest
 */
export class ChangeQuestionaireNameRequest extends Message<ChangeQuestionaireNameRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string name = 2;
   */
  name = ''

  constructor(data?: PartialMessage<ChangeQuestionaireNameRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireNameRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionaireNameRequest {
    return new ChangeQuestionaireNameRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireNameRequest {
    return new ChangeQuestionaireNameRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireNameRequest {
    return new ChangeQuestionaireNameRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeQuestionaireNameRequest | PlainMessage<ChangeQuestionaireNameRequest> | undefined,
    b: ChangeQuestionaireNameRequest | PlainMessage<ChangeQuestionaireNameRequest> | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionaireNameRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireNameResponse
 */
export class ChangeQuestionaireNameResponse extends Message<ChangeQuestionaireNameResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<ChangeQuestionaireNameResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireNameResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionaireNameResponse {
    return new ChangeQuestionaireNameResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireNameResponse {
    return new ChangeQuestionaireNameResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireNameResponse {
    return new ChangeQuestionaireNameResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeQuestionaireNameResponse | PlainMessage<ChangeQuestionaireNameResponse> | undefined,
    b: ChangeQuestionaireNameResponse | PlainMessage<ChangeQuestionaireNameResponse> | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionaireNameResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionairePhotoRequest
 */
export class ChangeQuestionairePhotoRequest extends Message<ChangeQuestionairePhotoRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string photo_id = 2;
   */
  photoId = ''

  constructor(data?: PartialMessage<ChangeQuestionairePhotoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionairePhotoRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'photo_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionairePhotoRequest {
    return new ChangeQuestionairePhotoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionairePhotoRequest {
    return new ChangeQuestionairePhotoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionairePhotoRequest {
    return new ChangeQuestionairePhotoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeQuestionairePhotoRequest | PlainMessage<ChangeQuestionairePhotoRequest> | undefined,
    b: ChangeQuestionairePhotoRequest | PlainMessage<ChangeQuestionairePhotoRequest> | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionairePhotoRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionairePhotoResponse
 */
export class ChangeQuestionairePhotoResponse extends Message<ChangeQuestionairePhotoResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<ChangeQuestionairePhotoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionairePhotoResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionairePhotoResponse {
    return new ChangeQuestionairePhotoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionairePhotoResponse {
    return new ChangeQuestionairePhotoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionairePhotoResponse {
    return new ChangeQuestionairePhotoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ChangeQuestionairePhotoResponse | PlainMessage<ChangeQuestionairePhotoResponse> | undefined,
    b: ChangeQuestionairePhotoResponse | PlainMessage<ChangeQuestionairePhotoResponse> | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionairePhotoResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.AddQuestionaireQuestionRequest
 */
export class AddQuestionaireQuestionRequest extends Message<AddQuestionaireQuestionRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string content = 2;
   */
  content = ''

  constructor(data?: PartialMessage<AddQuestionaireQuestionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.AddQuestionaireQuestionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'content', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddQuestionaireQuestionRequest {
    return new AddQuestionaireQuestionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddQuestionaireQuestionRequest {
    return new AddQuestionaireQuestionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddQuestionaireQuestionRequest {
    return new AddQuestionaireQuestionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddQuestionaireQuestionRequest | PlainMessage<AddQuestionaireQuestionRequest> | undefined,
    b: AddQuestionaireQuestionRequest | PlainMessage<AddQuestionaireQuestionRequest> | undefined
  ): boolean {
    return proto3.util.equals(AddQuestionaireQuestionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.AddQuestionaireQuestionResponse
 */
export class AddQuestionaireQuestionResponse extends Message<AddQuestionaireQuestionResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<AddQuestionaireQuestionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.AddQuestionaireQuestionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddQuestionaireQuestionResponse {
    return new AddQuestionaireQuestionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddQuestionaireQuestionResponse {
    return new AddQuestionaireQuestionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddQuestionaireQuestionResponse {
    return new AddQuestionaireQuestionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddQuestionaireQuestionResponse | PlainMessage<AddQuestionaireQuestionResponse> | undefined,
    b: AddQuestionaireQuestionResponse | PlainMessage<AddQuestionaireQuestionResponse> | undefined
  ): boolean {
    return proto3.util.equals(AddQuestionaireQuestionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireQuestionRequest
 */
export class ChangeQuestionaireQuestionRequest extends Message<ChangeQuestionaireQuestionRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string question_id = 2;
   */
  questionId = ''

  /**
   * @generated from field: string content = 3;
   */
  content = ''

  constructor(data?: PartialMessage<ChangeQuestionaireQuestionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireQuestionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'question_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'content', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionaireQuestionRequest {
    return new ChangeQuestionaireQuestionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireQuestionRequest {
    return new ChangeQuestionaireQuestionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireQuestionRequest {
    return new ChangeQuestionaireQuestionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ChangeQuestionaireQuestionRequest
      | PlainMessage<ChangeQuestionaireQuestionRequest>
      | undefined,
    b:
      | ChangeQuestionaireQuestionRequest
      | PlainMessage<ChangeQuestionaireQuestionRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionaireQuestionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireQuestionResponse
 */
export class ChangeQuestionaireQuestionResponse extends Message<ChangeQuestionaireQuestionResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<ChangeQuestionaireQuestionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ChangeQuestionaireQuestionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ChangeQuestionaireQuestionResponse {
    return new ChangeQuestionaireQuestionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireQuestionResponse {
    return new ChangeQuestionaireQuestionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ChangeQuestionaireQuestionResponse {
    return new ChangeQuestionaireQuestionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ChangeQuestionaireQuestionResponse
      | PlainMessage<ChangeQuestionaireQuestionResponse>
      | undefined,
    b:
      | ChangeQuestionaireQuestionResponse
      | PlainMessage<ChangeQuestionaireQuestionResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(ChangeQuestionaireQuestionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.DeleteQuestionaireQuestionRequest
 */
export class DeleteQuestionaireQuestionRequest extends Message<DeleteQuestionaireQuestionRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string question_id = 2;
   */
  questionId = ''

  constructor(data?: PartialMessage<DeleteQuestionaireQuestionRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.DeleteQuestionaireQuestionRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'question_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteQuestionaireQuestionRequest {
    return new DeleteQuestionaireQuestionRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteQuestionaireQuestionRequest {
    return new DeleteQuestionaireQuestionRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteQuestionaireQuestionRequest {
    return new DeleteQuestionaireQuestionRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteQuestionaireQuestionRequest
      | PlainMessage<DeleteQuestionaireQuestionRequest>
      | undefined,
    b:
      | DeleteQuestionaireQuestionRequest
      | PlainMessage<DeleteQuestionaireQuestionRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteQuestionaireQuestionRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.DeleteQuestionaireQuestionResponse
 */
export class DeleteQuestionaireQuestionResponse extends Message<DeleteQuestionaireQuestionResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Questionaire result = 1;
   */
  result?: Questionaire

  constructor(data?: PartialMessage<DeleteQuestionaireQuestionResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.DeleteQuestionaireQuestionResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Questionaire },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DeleteQuestionaireQuestionResponse {
    return new DeleteQuestionaireQuestionResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DeleteQuestionaireQuestionResponse {
    return new DeleteQuestionaireQuestionResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteQuestionaireQuestionResponse {
    return new DeleteQuestionaireQuestionResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | DeleteQuestionaireQuestionResponse
      | PlainMessage<DeleteQuestionaireQuestionResponse>
      | undefined,
    b:
      | DeleteQuestionaireQuestionResponse
      | PlainMessage<DeleteQuestionaireQuestionResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(DeleteQuestionaireQuestionResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesRequest
 */
export class ListQuestionairesRequest extends Message<ListQuestionairesRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Search search = 3;
   */
  search?: Query_Search

  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesRequest.QuestionairesQuery query = 4;
   */
  query?: ListQuestionairesRequest_QuestionairesQuery

  constructor(data?: PartialMessage<ListQuestionairesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'search', kind: 'message', T: Query_Search },
    { no: 4, name: 'query', kind: 'message', T: ListQuestionairesRequest_QuestionairesQuery },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestionairesRequest {
    return new ListQuestionairesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesRequest {
    return new ListQuestionairesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesRequest {
    return new ListQuestionairesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListQuestionairesRequest | PlainMessage<ListQuestionairesRequest> | undefined,
    b: ListQuestionairesRequest | PlainMessage<ListQuestionairesRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListQuestionairesRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesRequest.QuestionairesQuery
 */
export class ListQuestionairesRequest_QuestionairesQuery extends Message<ListQuestionairesRequest_QuestionairesQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Int status = 2;
   */
  status?: Query_Int

  constructor(data?: PartialMessage<ListQuestionairesRequest_QuestionairesQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesRequest.QuestionairesQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
    { no: 2, name: 'status', kind: 'message', T: Query_Int },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestionairesRequest_QuestionairesQuery {
    return new ListQuestionairesRequest_QuestionairesQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesRequest_QuestionairesQuery {
    return new ListQuestionairesRequest_QuestionairesQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesRequest_QuestionairesQuery {
    return new ListQuestionairesRequest_QuestionairesQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | ListQuestionairesRequest_QuestionairesQuery
      | PlainMessage<ListQuestionairesRequest_QuestionairesQuery>
      | undefined,
    b:
      | ListQuestionairesRequest_QuestionairesQuery
      | PlainMessage<ListQuestionairesRequest_QuestionairesQuery>
      | undefined
  ): boolean {
    return proto3.util.equals(ListQuestionairesRequest_QuestionairesQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesResponse
 */
export class ListQuestionairesResponse extends Message<ListQuestionairesResponse> {
  /**
   * @generated from field: repeated tech.monstrs.dating.compatibility.v1alpha1.Questionaire questionaires = 1;
   */
  questionaires: Questionaire[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListQuestionairesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.ListQuestionairesResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaires', kind: 'message', T: Questionaire, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListQuestionairesResponse {
    return new ListQuestionairesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesResponse {
    return new ListQuestionairesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListQuestionairesResponse {
    return new ListQuestionairesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListQuestionairesResponse | PlainMessage<ListQuestionairesResponse> | undefined,
    b: ListQuestionairesResponse | PlainMessage<ListQuestionairesResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListQuestionairesResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.StartSurveyRequest
 */
export class StartSurveyRequest extends Message<StartSurveyRequest> {
  /**
   * @generated from field: string questionaire_id = 1;
   */
  questionaireId = ''

  /**
   * @generated from field: string interviewee_id = 2;
   */
  intervieweeId = ''

  constructor(data?: PartialMessage<StartSurveyRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.StartSurveyRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'questionaire_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'interviewee_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSurveyRequest {
    return new StartSurveyRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSurveyRequest {
    return new StartSurveyRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): StartSurveyRequest {
    return new StartSurveyRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: StartSurveyRequest | PlainMessage<StartSurveyRequest> | undefined,
    b: StartSurveyRequest | PlainMessage<StartSurveyRequest> | undefined
  ): boolean {
    return proto3.util.equals(StartSurveyRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.StartSurveyResponse
 */
export class StartSurveyResponse extends Message<StartSurveyResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Survey result = 1;
   */
  result?: Survey

  constructor(data?: PartialMessage<StartSurveyResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.StartSurveyResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Survey },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartSurveyResponse {
    return new StartSurveyResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartSurveyResponse {
    return new StartSurveyResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): StartSurveyResponse {
    return new StartSurveyResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: StartSurveyResponse | PlainMessage<StartSurveyResponse> | undefined,
    b: StartSurveyResponse | PlainMessage<StartSurveyResponse> | undefined
  ): boolean {
    return proto3.util.equals(StartSurveyResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.AddSurveyAnswerRequest
 */
export class AddSurveyAnswerRequest extends Message<AddSurveyAnswerRequest> {
  /**
   * @generated from field: string survey_id = 1;
   */
  surveyId = ''

  /**
   * @generated from field: string question_id = 2;
   */
  questionId = ''

  /**
   * @generated from field: int32 answer = 3;
   */
  answer = 0

  constructor(data?: PartialMessage<AddSurveyAnswerRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.AddSurveyAnswerRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'survey_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'question_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'answer', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddSurveyAnswerRequest {
    return new AddSurveyAnswerRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddSurveyAnswerRequest {
    return new AddSurveyAnswerRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddSurveyAnswerRequest {
    return new AddSurveyAnswerRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddSurveyAnswerRequest | PlainMessage<AddSurveyAnswerRequest> | undefined,
    b: AddSurveyAnswerRequest | PlainMessage<AddSurveyAnswerRequest> | undefined
  ): boolean {
    return proto3.util.equals(AddSurveyAnswerRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.AddSurveyAnswerResponse
 */
export class AddSurveyAnswerResponse extends Message<AddSurveyAnswerResponse> {
  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.Survey result = 1;
   */
  result?: Survey

  constructor(data?: PartialMessage<AddSurveyAnswerResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.AddSurveyAnswerResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: Survey },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AddSurveyAnswerResponse {
    return new AddSurveyAnswerResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AddSurveyAnswerResponse {
    return new AddSurveyAnswerResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AddSurveyAnswerResponse {
    return new AddSurveyAnswerResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: AddSurveyAnswerResponse | PlainMessage<AddSurveyAnswerResponse> | undefined,
    b: AddSurveyAnswerResponse | PlainMessage<AddSurveyAnswerResponse> | undefined
  ): boolean {
    return proto3.util.equals(AddSurveyAnswerResponse, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListSurveysRequest
 */
export class ListSurveysRequest extends Message<ListSurveysRequest> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Pager pager = 1;
   */
  pager?: Query_Pager

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Order order = 2;
   */
  order?: Query_Order

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Search search = 3;
   */
  search?: Query_Search

  /**
   * @generated from field: tech.monstrs.dating.compatibility.v1alpha1.ListSurveysRequest.SurveysQuery query = 4;
   */
  query?: ListSurveysRequest_SurveysQuery

  constructor(data?: PartialMessage<ListSurveysRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.ListSurveysRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'pager', kind: 'message', T: Query_Pager },
    { no: 2, name: 'order', kind: 'message', T: Query_Order },
    { no: 3, name: 'search', kind: 'message', T: Query_Search },
    { no: 4, name: 'query', kind: 'message', T: ListSurveysRequest_SurveysQuery },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSurveysRequest {
    return new ListSurveysRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSurveysRequest {
    return new ListSurveysRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSurveysRequest {
    return new ListSurveysRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListSurveysRequest | PlainMessage<ListSurveysRequest> | undefined,
    b: ListSurveysRequest | PlainMessage<ListSurveysRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListSurveysRequest, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListSurveysRequest.SurveysQuery
 */
export class ListSurveysRequest_SurveysQuery extends Message<ListSurveysRequest_SurveysQuery> {
  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID id = 1;
   */
  id?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.Int status = 2;
   */
  status?: Query_Int

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID interviewee_id = 3;
   */
  intervieweeId?: Query_ID

  /**
   * @generated from field: tech.monstrs.queries.v1alpha1.Query.ID questionaire_id = 4;
   */
  questionaireId?: Query_ID

  constructor(data?: PartialMessage<ListSurveysRequest_SurveysQuery>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName =
    'tech.monstrs.dating.compatibility.v1alpha1.ListSurveysRequest.SurveysQuery'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'message', T: Query_ID },
    { no: 2, name: 'status', kind: 'message', T: Query_Int },
    { no: 3, name: 'interviewee_id', kind: 'message', T: Query_ID },
    { no: 4, name: 'questionaire_id', kind: 'message', T: Query_ID },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ListSurveysRequest_SurveysQuery {
    return new ListSurveysRequest_SurveysQuery().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ListSurveysRequest_SurveysQuery {
    return new ListSurveysRequest_SurveysQuery().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSurveysRequest_SurveysQuery {
    return new ListSurveysRequest_SurveysQuery().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListSurveysRequest_SurveysQuery | PlainMessage<ListSurveysRequest_SurveysQuery> | undefined,
    b: ListSurveysRequest_SurveysQuery | PlainMessage<ListSurveysRequest_SurveysQuery> | undefined
  ): boolean {
    return proto3.util.equals(ListSurveysRequest_SurveysQuery, a, b)
  }
}

/**
 * @generated from message tech.monstrs.dating.compatibility.v1alpha1.ListSurveysResponse
 */
export class ListSurveysResponse extends Message<ListSurveysResponse> {
  /**
   * @generated from field: repeated tech.monstrs.dating.compatibility.v1alpha1.Survey surveys = 1;
   */
  surveys: Survey[] = []

  /**
   * @generated from field: bool has_next_page = 2;
   */
  hasNextPage = false

  constructor(data?: PartialMessage<ListSurveysResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'tech.monstrs.dating.compatibility.v1alpha1.ListSurveysResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'surveys', kind: 'message', T: Survey, repeated: true },
    { no: 2, name: 'has_next_page', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSurveysResponse {
    return new ListSurveysResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSurveysResponse {
    return new ListSurveysResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ListSurveysResponse {
    return new ListSurveysResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: ListSurveysResponse | PlainMessage<ListSurveysResponse> | undefined,
    b: ListSurveysResponse | PlainMessage<ListSurveysResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListSurveysResponse, a, b)
  }
}
